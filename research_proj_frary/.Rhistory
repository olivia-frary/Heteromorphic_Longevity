testing<-(grab.results(term=(paste(spec$Species[i],"coi"))))
ifelse((testing == "Error:
Empty id list - nothing todo
Warning messages:
Errors parsing DocumentSummary "),
(i<-(i+1)),
(diptera_out[i,2]<-testing$AccessionVersion[1]))
}
for(i in 1:10){
diptera_out[i,1]<-spec$Species[i]
testing<-(grab.results(term=(paste(spec$Species[i],"coi"))))
ifelse((testing == "Error:
Empty id list - nothing todo
Warning messages:
Errors parsing DocumentSummary "),
(i<-(i+1)), # change this or check that we aren't iterating too much.
(diptera_out[i,3]<-testing$Slen[1]))
}
i <- 1
i <- 1
for(i in 1:10){
diptera_out[i,1]<-spec$Species[i]
testing<-(grab.results(term=(paste(spec$Species[i],"coi"))))
if(testing == "Error:
Empty id list - nothing todo
Warning messages:
Errors parsing DocumentSummary "){
(i<-(i+1))
} else {
diptera_out[i,2]<-testing$AccessionVersion[1]
diptera_out[i,3]<-testing$Slen[1]
}
}
#install.packages("reutils")
library(reutils)
grab.results <- function (term) {
# Search for the given term on nuccore. This gives us a list of
# record IDs.
ids <- esearch(term, db="nuccore")
# Grab summaries for the given record IDs, as a sort-of data frame.
sum <- esummary(ids, db="nuccore")
data <- content(sum, as="parsed")
# For some reason, this parser gives us lists of lists instead of a
# proper data frame (which should be lists of vectors). Return a
# fixed-up version.
data.frame(lapply(data, as.character), stringsAsFactors=FALSE)
}
#read in list of species
spec<-read.csv("lifespan_species.csv")
#install.packages("reutils")
library(reutils)
grab.results <- function (term) {
# Search for the given term on nuccore. This gives us a list of
# record IDs.
ids <- esearch(term, db="nuccore")
# Grab summaries for the given record IDs, as a sort-of data frame.
sum <- esummary(ids, db="nuccore")
data <- content(sum, as="parsed")
# For some reason, this parser gives us lists of lists instead of a
# proper data frame (which should be lists of vectors). Return a
# fixed-up version.
data.frame(lapply(data, as.character), stringsAsFactors=FALSE)
}
#read in list of species
spec<-read.csv("lifespan_species.csv")
#put in list of genes
gene.list<-c("mitochondrion","coi","coii", "coiii", "cytb", "hunchback")
#Make matrix for data
diptera_out<-matrix(,nrow=length(spec$Species),ncol=(length(gene.list)*2+1))
#make list of column names for table
columns<-list()
columns<-append(columns, "Spec")
for(i in 1:length(gene.list)){
columns<-append(columns, paste(gene.list[i],"Acc"))
columns<-append(columns, "Len")
}
colnames(diptera_out)<-columns
#loop to add data to table
for(i in 1:length(spec$Species)){
diptera_out[i,1]<-spec$Species[i]
for(k in 1:6){
testing<-(grab.results(term=(paste(spec$Species[i],gene.list[k]))))
if(length(testing)<1){
(k<-(k+1))}
#the below lets us know if after we filter to only DNA and remove other species that we still have data
#this lets us filter out RNA and also organisms that don't match but might appear
#like parasites, worms, etc.
else if(length((subset(testing, testing$MolType == "dna" & testing$Organism == spec$Species[i] & as.numeric(testing$Slen)<21000))[1])
<1){
k<-(k+1)
}
#this pulls data if we have data, DNA, and the right species, and filters out things larger than mitochondria
else{
testagain<-(subset(testing, testing$MolType == "dna" & testing$Organism == spec$Species[i] & as.numeric(testing$Slen)<21000))
diptera_out[i,(k*2)]<-testagain$AccessionVersion[1]
diptera_out[i,(k*2+1)]<-testagain$Slen[1]}
}
}
View(diptera_out)
df <- read_csv("analysis.data.csv")
df <- read.csv("analysis.data.csv")
df <- read.csv("/analysis.data.csv")
library(readr)
analysis_data <- read_csv("analysis_data.csv")
View(analysis_data)
df <- read_csv("analysis_data.csv")
df <- read_csv("analysis_data.csv")
View(df)
library(janitor)
df <- read_csv("analysis_data.csv") %>%
clean_names
View(df)
df %>% names
df %>%
ggplot(aes(x=ln_r_rlifespan,y=gs_diff_mb)) +
geom_point() +
geom_smooth()
library(tidyverse)
df %>%
ggplot(aes(x=ln_r_rlifespan,y=gs_diff_mb)) +
geom_point() +
geom_smooth()
class(ln_r_rlifespan)
class(df$ln_r_rlifespan)
as.numeric(df$ln_r_rlifespan)
df %>%
ggplot(aes(x=ln_r_rlifespan,y=gs_diff_mb)) +
geom_point() +
geom_smooth()
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=gs_diff_mb)) +
geom_point() +
geom_smooth()
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=gs_diff_mb)) +
geom_point() +
geom_smooth(method="lm")
class(gs_diff_mb)
class(df$gs_diff_mb)
df %>%
ggplot(aes(x=gs_diff_mb,y=as.numeric(ln_r_rlifespan))) +
geom_point() +
geom_smooth(method="lm")
glm(data=df, formula=ln_r_rlifespan~gs_diff_mb)
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
df %>%
ggplot(aes(x=abs(gs_diff_mb),y=as.numeric(ln_r_rlifespan))) +
geom_point() +
geom_smooth(method="lm")
df %>%
ggplot(aes(x=abs(gs_diff_mb),y=ln_r_rlifespan))
df %>%
ggplot(aes(x=abs(gs_diff_mb))) +
geom_box()
df %>%
ggplot(aes(x=abs(gs_diff_mb))) +
geom_boxplot()
df %>%
ggplot(aes(y=abs(gs_diff_mb))) +
geom_boxplot()
df %>%
ggplot(aes(y=gs_diff_mb)) +
geom_boxplot()
df %>% names
library(tidyverse)
library(readr)
library(janitor)
df <- read_csv("analysis_data.csv") %>%
clean_names
df %>% names
# basic plots of differences
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
df %>%
ggplot(aes(x=abs(gs_diff_mb),y=as.numeric(ln_r_rlifespan))) +
geom_point() +
geom_smooth(method="lm")
glm(data=df, formula=ln_r_rlifespan~gs_diff_mb)
install.packages("ape")
install.packages("seqinr")
library(ape)
library(seqinr)
# Install and load the required packages
# install.packages("ape")
# install.packages("seqinr")
library(ape)
library(seqinr)
#vector for accession numbers
mitochondrion_accession_numbers <- c(  "OR413803.1", "NC_006817.1", "NC_081591.1", "NC_046946.1", "OR183370.1")
# Fetching the sequences from GenBank
mitochondrion_sequences <- read.GenBank(mitochondrion_accession_numbers)
#accession number corresponding to species names/gene
mitochondrion_sequences_GenBank_IDs <- paste(attr(mitochondrion_sequences, "species"), names(mitochondrion_sequences), sep=" mitochondrion ")
# Write the sequences to a FASTA file
write.dna(mitochondrion_sequences, file = "mitochondrion.fasta", format = "fasta", append = FALSE, nbcol = 6, colsep = " ", colw = 10)
# Read the sequences from the FASTA file
mitochondrion_seq_format <- read.FASTA(file = "mitochondrion.fasta")
# Modify the names of the sequences
names(mitochondrion_seq_format) <- mitochondrion_sequences_GenBank_IDs
# Write sequences to a new FASTA file
write.FASTA(mitochondrion_seq_format, file = "mitochondrion_seq_format.fasta")
library(tidyverse)
library(readr)
library(janitor)
df <- read_csv("analysis_data.csv") %>%
clean_names
df %>% names
# basic plots of differences
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
df %>%
ggplot(aes(x=abs(gs_diff_mb),y=as.numeric(ln_r_rlifespan))) +
geom_point() +
geom_smooth(method="lm")
glm(data=df, formula=ln_r_rlifespan~gs_diff_mb)
View(df)
# random plots to look at data
# pull out just the female heterogametic species
df %>%
filter(sex_determination == "female heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# pull out just the male heterogametic species
df %>%
filter(sex_determination == "female heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# pull out just the male heterogametic species
df %>%
filter(sex_determination == "male heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# random plots to look at data
# pull out just the female heterogametic species
df %>%
filter(sex_determination == "female heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# pull out just the male heterogametic species
df %>%
filter(sex_determination == "male heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# random plots to look at data
# pull out just the female heterogametic species
df %>%
filter(sex_determination == "female heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# pull out just the male heterogametic species
df %>%
filter(sex_determination == "male heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# random plots to look at data
# pull out just the female heterogametic species
df %>%
filter(sex_determination == "female heterogametic") %>% view
# random plots to look at data
# pull out just the female heterogametic species
df %>%
filter(sex_determination == "female heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# random plots to look at data
# pull out just the female heterogametic species
df %>%
filter(sex_determination == "female heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point()
# pull out just the male heterogametic species
df %>%
filter(sex_determination == "male heterogametic") %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan))) +
geom_point()
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point()
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point() +
facet_wrap(~sex_determindation)
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point() +
facet_wrap(~sex_determination)
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point() +
facet_wrap(~sex_determination) +
abline(v=0, col="blue")
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point() +
facet_wrap(~sex_determination) +
geom_vline(xintercept = 0,
color = "blue", size=1.5)
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point() +
facet_wrap(~sex_determination) +
geom_vline(xintercept = 0,
color = "blue")
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point() +
facet_wrap(~sex_determination) +
geom_vline(xintercept = 0,
color = "red")
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point() +
facet_wrap(~sex_determination) +
geom_vline(xintercept = 0,
color = "red", size = 1.2)
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point() +
facet_wrap(~sex_determination) +
geom_vline(xintercept = 0,
color = "red", size = 1)
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species, color=sex_determination)) +
geom_point() +
facet_wrap(~sex_determination) +
geom_vline(xintercept = 0,
color = "red", size = 1)
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species, color=sex_determination)) +
geom_point() +
facet_wrap(~sex_determination) +
geom_vline(xintercept = 0,
color = "blue", size = 1)
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species, color=sex_determination)) +
geom_point() +
geom_vline(xintercept = 0,
color = "blue", size = 1)
# plot the og data that doesn't compare differences in genome size
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species)) +
geom_point() +
facet_wrap(~sex_determination) +
geom_vline(xintercept = 0,
color = "blue", size = 1)
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species, color=sex_determination)) +
geom_point() +
geom_vline(xintercept = 0, size = 1)
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species, color=sex_determination, na.remove = TRUE)) +
geom_point() +
geom_vline(xintercept = 0, size = 1)
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan), y=species, color=sex_determination)) +
geom_point() +
geom_vline(xintercept = 0, size = 1)
# basic plots of differences
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
df %>%
ggplot(aes(x=abs(gs_diff_mb),y=as.numeric(ln_r_rlifespan))) +
geom_point() +
geom_smooth(method="lm")
# basic plots of differences
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
library(tidyverse)
library(readr)
library(janitor)
df <- read_csv("analysis_data.csv") %>%
clean_names
# basic plots of differences
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
# basic plots of differences
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm") +
geom_vline(xintercept = 0, size = 1)
# basic plots of differences
df %>%
ggplot(aes(x=as.numeric(ln_r_rlifespan),y=abs(gs_diff_mb))) +
geom_point() +
geom_smooth(method="lm")
#install.packages("reutils")
library(reutils)
grab.results <- function (term) {
# Search for the given term on nuccore. This gives us a list of
# record IDs.
ids <- esearch(term, db="nuccore")
# Grab summaries for the given record IDs, as a sort-of data frame.
sum <- esummary(ids, db="nuccore")
data <- content(sum, as="parsed")
# For some reason, this parser gives us lists of lists instead of a
# proper data frame (which should be lists of vectors). Return a
# fixed-up version.
data.frame(lapply(data, as.character), stringsAsFactors=FALSE)
}
#read in list of species
spec<-read.csv("lifespan_species.csv")
#put in list of genes
gene.list<-c("mitochondrion","coi","coii", "coiii", "cytb", "hunchback") # did hjelmen suggest cytb and hunchback??? I can't remember
#Make matrix for data
accession_out<-matrix(,nrow=length(spec$Species),ncol=(length(gene.list)*2+1))
#make list of column names for table
columns<-list()
columns<-append(columns, "Spec")
for(i in 1:length(gene.list)){
columns<-append(columns, paste(gene.list[i],"Acc"))
columns<-append(columns, "Len")
}
colnames(accession_out)<-columns
#loop to add data to table
for(i in 1:length(spec$Species)){
accession_out[i,1]<-spec$Species[i]
for(k in 1:6){
testing<-(grab.results(term=(paste(spec$Species[i],gene.list[k]))))
if(length(testing)<1){
(k<-(k+1))}
#the below lets us know if after we filter to only DNA and remove other species that we still have data
#this lets us filter out RNA and also organisms that don't match but might appear
#like parasites, worms, etc.
else if(length((subset(testing, testing$MolType == "dna" & testing$Organism == spec$Species[i] & as.numeric(testing$Slen)<21000))[1])
<1){
k<-(k+1)
}
#this pulls data if we have data, DNA, and the right species, and filters out things larger than mitochondria
else{
testagain<-(subset(testing, testing$MolType == "dna" & testing$Organism == spec$Species[i] & as.numeric(testing$Slen)<21000))
accession_out[i,(k*2)]<-testagain$AccessionVersion[1]
accession_out[i,(k*2+1)]<-testagain$Slen[1]}
}
}
View(accession_out)
write.csv(accession_out,"accession_numbers.csv", row.names = FALSE)
# read in your file of accession numbers to feed into script
df <- read_csv("accession_numbers.csv")
library(ape)
library(seqinr)
library(janitor)
# read in your file of accession numbers to feed into script
df <- read_csv("accession_numbers.csv") %>%
clean_names()
df$names
df %>% names
mitochondrron_accession_numbers <- df$mitochondrion_acc
# Fetching the sequences from GenBank
mitochondrion_sequences <- read.GenBank(mitochondrion_accession_numbers)
mitochondrion_accession_numbers <- df$mitochondrion_acc
# Install and load the required packages
# install.packages("ape")
# install.packages("seqinr")
library(ape)
library(seqinr)
library(janitor)
# read in your file of accession numbers to feed into script
df <- read_csv("accession_numbers.csv") %>%
clean_names()
df %>% names
mitochondrion_accession_numbers <- df$mitochondrion_acc
# Fetching the sequences from GenBank
mitochondrion_sequences <- read.GenBank(mitochondrion_accession_numbers)
View(mitochondrion_sequences)
#accession number corresponding to species names/gene
mitochondrion_sequences_GenBank_IDs <- paste(attr(mitochondrion_sequences, "species"), names(mitochondrion_sequences), sep=" mitochondrion ")
# Write the sequences to a FASTA file
write.dna(mitochondrion_sequences, file = "mitochondrion.fasta", format = "fasta", append = FALSE, nbcol = 6, colsep = " ", colw = 10)
# Read the sequences from the FASTA file
mitochondrion_seq_format <- read.FASTA(file = "mitochondrion.fasta")
# Modify the names of the sequences
names(mitochondrion_seq_format) <- mitochondrion_sequences_GenBank_IDs
# Write sequences to a new FASTA file
write.FASTA(mitochondrion_seq_format, file = "mitochondrion_seq_format.fasta")
